@using Microsoft.AspNetCore.Mvc.Formatters
@using Microsoft.AspNetCore.Mvc.Localization
@model Skoruba.IdentityServer4.STS.Identity.ViewModels.Manage.VerificationPhoneNumberViewModel
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = "VerificationPhoneNumber";
    Layout = "_Layout";
}

<h4>@Localizer["Title"]</h4>

@await Html.PartialAsync("_ValidationSummary")

@if (!string.IsNullOrEmpty(Model.StatusMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Model.StatusMessage
    </div>
}

<form id="client-form" asp-controller="Manage" asp-action="VerificationPhoneNumber" Method="post">
    <input type="hidden" asp-for="Interval" />
    <div class="card mt-3">
        <h5 class="card-header">@string.Format(@Localizer["TitleWithNumber"].Value, Model.PhoneNumber)</h5>
        <div class="card-body">
            <input asp-for="PhoneNumber" class="d-none"/>
            <div class="form-group row">
                <label asp-for="Token" class="col-sm-3 col-form-label">@Localizer["TotpCode"]</label>
                <div class="col-sm-9">
                    <input type="text" asp-for="Token" required="" class="form-control" />
                    <span asp-validation-for="Token" class="text-danger"></span>

                    <div>
                        <p id="demo"></p>
                        <button id="SendAgainCode" asp-action="SendAgainVerificationPhoneNumber" 
                                formnovalidate class="btn btn-link d-none">@Localizer["SendAgainCode"]</button>
                    </div>
                </div>
            </div>

            <div class="form-group row">
                <label class="col-sm-3 col-form-label">
                </label>
                <div class="col-sm-9">
                    <button type="submit" class="btn btn-primary">@Localizer["Send"]</button>
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        var distance = @Model.Interval;
        var interval = setInterval(Update, 1000);

        $(document).ready(Update);

        function Update() {
            window.$("#demo").removeClass("d-none");
            window.$("#SendAgainCode").addClass("d-none");
            distance = distance - 1;
            document.getElementById("demo").innerHTML = Format(distance);
            if (distance < 0) {
                clearInterval(interval);
                window.$("#demo").addClass("d-none");
                window.$("#SendAgainCode").removeClass("d-none");
            }
        }

        function Format(i) {
            var min = parseInt(i / 60);
            var sec = i % 60;

            if (min < 10) {
                min = `0${min}`;
            }
            if (sec < 10) {
                sec = `0${sec}`;
            }
            return min + ':' + sec;
        }
    </script>
}
